<?xml version="1.0"?>
<launch>
  <arg name="rviz" default="true" />
  <arg name="robot_ip" default="192.168.1.20" />
  <arg name="sim_robot" default="true" />
  <arg name="sim_sensor" default="true" />

  <!-- Tesseract Monitor Parameters -->
  <arg name="robot_description" default="robot_description"/>
  <arg name="discrete_plugin" default="BulletDiscreteBVHManager"/>
  <arg name="continuous_plugin" default="BulletCastBVHManager"/>
  <arg name="joint_state_topic" default=""/>
  <arg name="monitor_namespace" default="snp_workshop_environment"/>

  <!-- Load universal robot description format (URDF) -->
  <param name="$(arg robot_description)" command="$(find xacro)/xacro --inorder '$(find snp_support)/urdf/workcell.xacro'" />

  <!-- The semantic description that corresponds to the URDF -->
  <param name="$(arg robot_description)_semantic" textfile="$(find snp_support)/config/workcell.srdf" />

  <!-- Launch Tesseract Monitor -->
  <node pkg="tesseract_monitoring" type="tesseract_monitoring_environment_node" name="tesseract_environment_monitor" output="screen" required="true">
    <param name="robot_description" type="string" value="$(arg robot_description)"/>
    <param name="discrete_plugin" type="string" value="$(arg discrete_plugin)"/>
    <param name="continuous_plugin" type="string" value="$(arg continuous_plugin)"/>
    <param name="joint_state_topic" type="string" value="$(arg joint_state_topic)"/>
    <param name="monitor_namespace" type="string" value="$(arg monitor_namespace)"/>
    <param name="publish_environment" type="bool" value="true"/>
  </node>

  <!-- Launch Tesseract Planning Server -->
  <!-- The planning server will monitor the environment namespace monitor_namespace for environment updates  -->
  <node pkg="snp_motion_planning" type="snp_motion_planning_planning_server_node" name="snp_planning_server" output="screen" required="true">
    <param name="robot_description" type="string" value="$(arg robot_description)"/>
    <param name="discrete_plugin" type="string" value="$(arg discrete_plugin)"/>
    <param name="continuous_plugin" type="string" value="$(arg continuous_plugin)"/>
    <param name="monitor_namespace" type="string" value="$(arg monitor_namespace)_planning_server"/>
    <param name="monitored_namespace" type="string" value="$(arg monitor_namespace)"/>
  </node>

  <!-- Launch Tesseract Contact Monitor -->
  <!-- The planning server will monitor the environment namespace monitor_namespace for environment updates  -->
  <node name="tesseract_contact_monitoring" pkg="tesseract_monitoring" type="tesseract_monitoring_contacts_node" required="true">
    <param name="monitor_namespace" type="string" value="$(arg monitor_namespace)_contact_monitor"/>
    <param name="monitored_namespace" type="string" value="$(arg monitor_namespace)"/>
    <param name="publish_markers" value="true"/>
    <param name="publish_environment" value="true"/>
  </node>

  <!-- Launch joint state publisher and listen to robot_joint_states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[robot_joint_states]</rosparam>
  </node>

  <!-- Launch robot drivers -->
  <include unless="$(arg sim_robot)" file="$(find snp_bringup_ros1)/launch/robot_interface_streaming_mh180_120.launch">
    <arg name="robot_ip" value="$(arg robot_ip)" />
  </include>

  <!-- Launch realsense drivers -->
  <include unless="$(arg sim_sensor)" file="$(find snp_bringup_ros1)/launch/rs_camera.launch">
    <arg name="align_depth" value="true" />
    <arg name="enable_pointcloud" value="true" />
    <arg name="publish_tf" value="false" />
  </include>

  <group if="$(arg sim_sensor)" ns="camera">
<!--    <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster"
        args="0.000, -0.590, -0.000 0.500, -0.500, 0.500, -0.500 camera_link camera_color_optical_frame 10" />-->
    <node name="camera_info" pkg="rostopic" type="rostopic"
        args="pub camera_info sensor_msgs/CameraInfo
       '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: 'camera_color_optical_frame'},
        height: 720, width: 1280, distortion_model: 'plumb_bob',
        D: [-0.053805962204933167, 0.06546983867883682, 0.0005139514687471092, -0.0007036244496703148, -0.02081681229174137],
        K: [637.2805786132812, 0.0, 625.6758422851562, 0.0, 635.815185546875, 373.4616394042969, 0.0, 0.0, 1.0],
        R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
        P: [637.2805786132812, 0.0, 625.6758422851562, 0.0, 0.0, 635.815185546875, 373.4616394042969, 0.0, 0.0, 0.0, 1.0, 0.0],
        binning_x: 0, binning_y: 0,
        roi: {x_offset: 0, y_offset: 0, height: 0, width: 0, do_rectify: false}}' -r 2"
        output="screen"/>
  </group>

  <!-- Launch RViz -->
  <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find snp_bringup_ros1)/config/snp.rviz" output="screen" required="true"/>

</launch>
